// Code generated by protoc-gen-go. DO NOT EDIT.
// source: controller.proto

/*
Package rbdproto is a generated protocol buffer package.

It is generated from these files:
	controller.proto

It has these top-level messages:
	NULL
	M2CJoinReq
	M2CJoinAck
	M2CFailReportReq
	M2CFailReportAck
	M2CRGUpdateReq
	M2CRGUpdateAck
	M2CStateReportReq
	M2CStateReportAck
	Cli2CCreateVolumeReq
	Cli2CCreateVolumeAck
	Cli2CDeleteVolumeReq
	Cli2CDeleteVolumeAck
	Cli2CUpdateVolumeReq
	Cli2CUpdateVolumeAck
	Cli2COpenVolumeReq
	Cli2COpenVolumeAck
	Cli2CCloseVolumeReq
	Cli2CCloseVolumeAck
	Cli2CCreateINodeReq
	Cli2CCreateINodeAck
	Cli2CExceptionReportReq
	Cli2CExceptionReportAck
	D2CJoinReq
	D2CJoinAck
	D2CStateReportReq
	D2CStateReportAck
	D2CExceptionReportReq
	D2CExceptionReportAck
	D2CBGRecoverReportReq
	D2CBGRecoverReportAck
*/
package rbdproto

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NULL struct {
}

func (m *NULL) Reset()                    { *m = NULL{} }
func (m *NULL) String() string            { return proto.CompactTextString(m) }
func (*NULL) ProtoMessage()               {}
func (*NULL) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type M2CJoinReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *M2CJoinReq) Reset()                    { *m = M2CJoinReq{} }
func (m *M2CJoinReq) String() string            { return proto.CompactTextString(m) }
func (*M2CJoinReq) ProtoMessage()               {}
func (*M2CJoinReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *M2CJoinReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type M2CJoinAck struct {
	MsgId  int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
	NodeId int32 `protobuf:"varint,2,opt,name=NodeId" json:"NodeId,omitempty"`
	Ret    int32 `protobuf:"varint,3,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *M2CJoinAck) Reset()                    { *m = M2CJoinAck{} }
func (m *M2CJoinAck) String() string            { return proto.CompactTextString(m) }
func (*M2CJoinAck) ProtoMessage()               {}
func (*M2CJoinAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *M2CJoinAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *M2CJoinAck) GetNodeId() int32 {
	if m != nil {
		return m.NodeId
	}
	return 0
}

func (m *M2CJoinAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type M2CFailReportReq struct {
	MsgId      int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
	FailedNode int32 `protobuf:"varint,2,opt,name=FailedNode" json:"FailedNode,omitempty"`
}

func (m *M2CFailReportReq) Reset()                    { *m = M2CFailReportReq{} }
func (m *M2CFailReportReq) String() string            { return proto.CompactTextString(m) }
func (*M2CFailReportReq) ProtoMessage()               {}
func (*M2CFailReportReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *M2CFailReportReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *M2CFailReportReq) GetFailedNode() int32 {
	if m != nil {
		return m.FailedNode
	}
	return 0
}

type M2CFailReportAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
	Ret   int32 `protobuf:"varint,2,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *M2CFailReportAck) Reset()                    { *m = M2CFailReportAck{} }
func (m *M2CFailReportAck) String() string            { return proto.CompactTextString(m) }
func (*M2CFailReportAck) ProtoMessage()               {}
func (*M2CFailReportAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *M2CFailReportAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *M2CFailReportAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type M2CRGUpdateReq struct {
	MsgId   int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
	Status  int32 `protobuf:"varint,2,opt,name=Status" json:"Status,omitempty"`
	NewNode int32 `protobuf:"varint,3,opt,name=NewNode" json:"NewNode,omitempty"`
}

func (m *M2CRGUpdateReq) Reset()                    { *m = M2CRGUpdateReq{} }
func (m *M2CRGUpdateReq) String() string            { return proto.CompactTextString(m) }
func (*M2CRGUpdateReq) ProtoMessage()               {}
func (*M2CRGUpdateReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *M2CRGUpdateReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *M2CRGUpdateReq) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *M2CRGUpdateReq) GetNewNode() int32 {
	if m != nil {
		return m.NewNode
	}
	return 0
}

type M2CRGUpdateAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
	Ret   int32 `protobuf:"varint,2,opt,name=Ret" json:"Ret,omitempty"`
}

func (m *M2CRGUpdateAck) Reset()                    { *m = M2CRGUpdateAck{} }
func (m *M2CRGUpdateAck) String() string            { return proto.CompactTextString(m) }
func (*M2CRGUpdateAck) ProtoMessage()               {}
func (*M2CRGUpdateAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *M2CRGUpdateAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func (m *M2CRGUpdateAck) GetRet() int32 {
	if m != nil {
		return m.Ret
	}
	return 0
}

type M2CStateReportReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *M2CStateReportReq) Reset()                    { *m = M2CStateReportReq{} }
func (m *M2CStateReportReq) String() string            { return proto.CompactTextString(m) }
func (*M2CStateReportReq) ProtoMessage()               {}
func (*M2CStateReportReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *M2CStateReportReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type M2CStateReportAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *M2CStateReportAck) Reset()                    { *m = M2CStateReportAck{} }
func (m *M2CStateReportAck) String() string            { return proto.CompactTextString(m) }
func (*M2CStateReportAck) ProtoMessage()               {}
func (*M2CStateReportAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *M2CStateReportAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CCreateVolumeReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CCreateVolumeReq) Reset()                    { *m = Cli2CCreateVolumeReq{} }
func (m *Cli2CCreateVolumeReq) String() string            { return proto.CompactTextString(m) }
func (*Cli2CCreateVolumeReq) ProtoMessage()               {}
func (*Cli2CCreateVolumeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Cli2CCreateVolumeReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CCreateVolumeAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CCreateVolumeAck) Reset()                    { *m = Cli2CCreateVolumeAck{} }
func (m *Cli2CCreateVolumeAck) String() string            { return proto.CompactTextString(m) }
func (*Cli2CCreateVolumeAck) ProtoMessage()               {}
func (*Cli2CCreateVolumeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *Cli2CCreateVolumeAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CDeleteVolumeReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CDeleteVolumeReq) Reset()                    { *m = Cli2CDeleteVolumeReq{} }
func (m *Cli2CDeleteVolumeReq) String() string            { return proto.CompactTextString(m) }
func (*Cli2CDeleteVolumeReq) ProtoMessage()               {}
func (*Cli2CDeleteVolumeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *Cli2CDeleteVolumeReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CDeleteVolumeAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CDeleteVolumeAck) Reset()                    { *m = Cli2CDeleteVolumeAck{} }
func (m *Cli2CDeleteVolumeAck) String() string            { return proto.CompactTextString(m) }
func (*Cli2CDeleteVolumeAck) ProtoMessage()               {}
func (*Cli2CDeleteVolumeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *Cli2CDeleteVolumeAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CUpdateVolumeReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CUpdateVolumeReq) Reset()                    { *m = Cli2CUpdateVolumeReq{} }
func (m *Cli2CUpdateVolumeReq) String() string            { return proto.CompactTextString(m) }
func (*Cli2CUpdateVolumeReq) ProtoMessage()               {}
func (*Cli2CUpdateVolumeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *Cli2CUpdateVolumeReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CUpdateVolumeAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CUpdateVolumeAck) Reset()                    { *m = Cli2CUpdateVolumeAck{} }
func (m *Cli2CUpdateVolumeAck) String() string            { return proto.CompactTextString(m) }
func (*Cli2CUpdateVolumeAck) ProtoMessage()               {}
func (*Cli2CUpdateVolumeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *Cli2CUpdateVolumeAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2COpenVolumeReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2COpenVolumeReq) Reset()                    { *m = Cli2COpenVolumeReq{} }
func (m *Cli2COpenVolumeReq) String() string            { return proto.CompactTextString(m) }
func (*Cli2COpenVolumeReq) ProtoMessage()               {}
func (*Cli2COpenVolumeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Cli2COpenVolumeReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2COpenVolumeAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2COpenVolumeAck) Reset()                    { *m = Cli2COpenVolumeAck{} }
func (m *Cli2COpenVolumeAck) String() string            { return proto.CompactTextString(m) }
func (*Cli2COpenVolumeAck) ProtoMessage()               {}
func (*Cli2COpenVolumeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Cli2COpenVolumeAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CCloseVolumeReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CCloseVolumeReq) Reset()                    { *m = Cli2CCloseVolumeReq{} }
func (m *Cli2CCloseVolumeReq) String() string            { return proto.CompactTextString(m) }
func (*Cli2CCloseVolumeReq) ProtoMessage()               {}
func (*Cli2CCloseVolumeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *Cli2CCloseVolumeReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CCloseVolumeAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CCloseVolumeAck) Reset()                    { *m = Cli2CCloseVolumeAck{} }
func (m *Cli2CCloseVolumeAck) String() string            { return proto.CompactTextString(m) }
func (*Cli2CCloseVolumeAck) ProtoMessage()               {}
func (*Cli2CCloseVolumeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *Cli2CCloseVolumeAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CCreateINodeReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CCreateINodeReq) Reset()                    { *m = Cli2CCreateINodeReq{} }
func (m *Cli2CCreateINodeReq) String() string            { return proto.CompactTextString(m) }
func (*Cli2CCreateINodeReq) ProtoMessage()               {}
func (*Cli2CCreateINodeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Cli2CCreateINodeReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CCreateINodeAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CCreateINodeAck) Reset()                    { *m = Cli2CCreateINodeAck{} }
func (m *Cli2CCreateINodeAck) String() string            { return proto.CompactTextString(m) }
func (*Cli2CCreateINodeAck) ProtoMessage()               {}
func (*Cli2CCreateINodeAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *Cli2CCreateINodeAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CExceptionReportReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CExceptionReportReq) Reset()                    { *m = Cli2CExceptionReportReq{} }
func (m *Cli2CExceptionReportReq) String() string            { return proto.CompactTextString(m) }
func (*Cli2CExceptionReportReq) ProtoMessage()               {}
func (*Cli2CExceptionReportReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Cli2CExceptionReportReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type Cli2CExceptionReportAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *Cli2CExceptionReportAck) Reset()                    { *m = Cli2CExceptionReportAck{} }
func (m *Cli2CExceptionReportAck) String() string            { return proto.CompactTextString(m) }
func (*Cli2CExceptionReportAck) ProtoMessage()               {}
func (*Cli2CExceptionReportAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Cli2CExceptionReportAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type D2CJoinReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *D2CJoinReq) Reset()                    { *m = D2CJoinReq{} }
func (m *D2CJoinReq) String() string            { return proto.CompactTextString(m) }
func (*D2CJoinReq) ProtoMessage()               {}
func (*D2CJoinReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *D2CJoinReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type D2CJoinAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *D2CJoinAck) Reset()                    { *m = D2CJoinAck{} }
func (m *D2CJoinAck) String() string            { return proto.CompactTextString(m) }
func (*D2CJoinAck) ProtoMessage()               {}
func (*D2CJoinAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *D2CJoinAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type D2CStateReportReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *D2CStateReportReq) Reset()                    { *m = D2CStateReportReq{} }
func (m *D2CStateReportReq) String() string            { return proto.CompactTextString(m) }
func (*D2CStateReportReq) ProtoMessage()               {}
func (*D2CStateReportReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *D2CStateReportReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type D2CStateReportAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *D2CStateReportAck) Reset()                    { *m = D2CStateReportAck{} }
func (m *D2CStateReportAck) String() string            { return proto.CompactTextString(m) }
func (*D2CStateReportAck) ProtoMessage()               {}
func (*D2CStateReportAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *D2CStateReportAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type D2CExceptionReportReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *D2CExceptionReportReq) Reset()                    { *m = D2CExceptionReportReq{} }
func (m *D2CExceptionReportReq) String() string            { return proto.CompactTextString(m) }
func (*D2CExceptionReportReq) ProtoMessage()               {}
func (*D2CExceptionReportReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *D2CExceptionReportReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type D2CExceptionReportAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *D2CExceptionReportAck) Reset()                    { *m = D2CExceptionReportAck{} }
func (m *D2CExceptionReportAck) String() string            { return proto.CompactTextString(m) }
func (*D2CExceptionReportAck) ProtoMessage()               {}
func (*D2CExceptionReportAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *D2CExceptionReportAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type D2CBGRecoverReportReq struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *D2CBGRecoverReportReq) Reset()                    { *m = D2CBGRecoverReportReq{} }
func (m *D2CBGRecoverReportReq) String() string            { return proto.CompactTextString(m) }
func (*D2CBGRecoverReportReq) ProtoMessage()               {}
func (*D2CBGRecoverReportReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *D2CBGRecoverReportReq) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

type D2CBGRecoverReportAck struct {
	MsgId int64 `protobuf:"varint,1,opt,name=MsgId" json:"MsgId,omitempty"`
}

func (m *D2CBGRecoverReportAck) Reset()                    { *m = D2CBGRecoverReportAck{} }
func (m *D2CBGRecoverReportAck) String() string            { return proto.CompactTextString(m) }
func (*D2CBGRecoverReportAck) ProtoMessage()               {}
func (*D2CBGRecoverReportAck) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *D2CBGRecoverReportAck) GetMsgId() int64 {
	if m != nil {
		return m.MsgId
	}
	return 0
}

func init() {
	proto.RegisterType((*NULL)(nil), "rbdproto.NULL")
	proto.RegisterType((*M2CJoinReq)(nil), "rbdproto.M2CJoinReq")
	proto.RegisterType((*M2CJoinAck)(nil), "rbdproto.M2CJoinAck")
	proto.RegisterType((*M2CFailReportReq)(nil), "rbdproto.M2CFailReportReq")
	proto.RegisterType((*M2CFailReportAck)(nil), "rbdproto.M2CFailReportAck")
	proto.RegisterType((*M2CRGUpdateReq)(nil), "rbdproto.M2CRGUpdateReq")
	proto.RegisterType((*M2CRGUpdateAck)(nil), "rbdproto.M2CRGUpdateAck")
	proto.RegisterType((*M2CStateReportReq)(nil), "rbdproto.M2CStateReportReq")
	proto.RegisterType((*M2CStateReportAck)(nil), "rbdproto.M2CStateReportAck")
	proto.RegisterType((*Cli2CCreateVolumeReq)(nil), "rbdproto.Cli2CCreateVolumeReq")
	proto.RegisterType((*Cli2CCreateVolumeAck)(nil), "rbdproto.Cli2CCreateVolumeAck")
	proto.RegisterType((*Cli2CDeleteVolumeReq)(nil), "rbdproto.Cli2CDeleteVolumeReq")
	proto.RegisterType((*Cli2CDeleteVolumeAck)(nil), "rbdproto.Cli2CDeleteVolumeAck")
	proto.RegisterType((*Cli2CUpdateVolumeReq)(nil), "rbdproto.Cli2CUpdateVolumeReq")
	proto.RegisterType((*Cli2CUpdateVolumeAck)(nil), "rbdproto.Cli2CUpdateVolumeAck")
	proto.RegisterType((*Cli2COpenVolumeReq)(nil), "rbdproto.Cli2COpenVolumeReq")
	proto.RegisterType((*Cli2COpenVolumeAck)(nil), "rbdproto.Cli2COpenVolumeAck")
	proto.RegisterType((*Cli2CCloseVolumeReq)(nil), "rbdproto.Cli2CCloseVolumeReq")
	proto.RegisterType((*Cli2CCloseVolumeAck)(nil), "rbdproto.Cli2CCloseVolumeAck")
	proto.RegisterType((*Cli2CCreateINodeReq)(nil), "rbdproto.Cli2CCreateINodeReq")
	proto.RegisterType((*Cli2CCreateINodeAck)(nil), "rbdproto.Cli2CCreateINodeAck")
	proto.RegisterType((*Cli2CExceptionReportReq)(nil), "rbdproto.Cli2CExceptionReportReq")
	proto.RegisterType((*Cli2CExceptionReportAck)(nil), "rbdproto.Cli2CExceptionReportAck")
	proto.RegisterType((*D2CJoinReq)(nil), "rbdproto.D2CJoinReq")
	proto.RegisterType((*D2CJoinAck)(nil), "rbdproto.D2CJoinAck")
	proto.RegisterType((*D2CStateReportReq)(nil), "rbdproto.D2CStateReportReq")
	proto.RegisterType((*D2CStateReportAck)(nil), "rbdproto.D2CStateReportAck")
	proto.RegisterType((*D2CExceptionReportReq)(nil), "rbdproto.D2CExceptionReportReq")
	proto.RegisterType((*D2CExceptionReportAck)(nil), "rbdproto.D2CExceptionReportAck")
	proto.RegisterType((*D2CBGRecoverReportReq)(nil), "rbdproto.D2CBGRecoverReportReq")
	proto.RegisterType((*D2CBGRecoverReportAck)(nil), "rbdproto.D2CBGRecoverReportAck")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Controller service

type ControllerClient interface {
	M2CJoin(ctx context.Context, in *M2CJoinReq, opts ...grpc.CallOption) (*M2CJoinAck, error)
	M2CFailReport(ctx context.Context, in *M2CFailReportReq, opts ...grpc.CallOption) (*M2CFailReportAck, error)
	M2CRGUpdate(ctx context.Context, in *M2CRGUpdateReq, opts ...grpc.CallOption) (*M2CRGUpdateAck, error)
	M2CStateReport(ctx context.Context, in *M2CStateReportReq, opts ...grpc.CallOption) (*M2CStateReportAck, error)
	Cli2CCreateVolume(ctx context.Context, in *Cli2CCreateVolumeReq, opts ...grpc.CallOption) (*Cli2CCreateVolumeAck, error)
	Cli2CDeleteVolume(ctx context.Context, in *Cli2CDeleteVolumeReq, opts ...grpc.CallOption) (*Cli2CDeleteVolumeAck, error)
	Cli2CUpdateVolume(ctx context.Context, in *Cli2CUpdateVolumeReq, opts ...grpc.CallOption) (*Cli2CUpdateVolumeAck, error)
	Cli2COpenVolume(ctx context.Context, in *Cli2COpenVolumeReq, opts ...grpc.CallOption) (*Cli2COpenVolumeAck, error)
	Cli2CCloseVolume(ctx context.Context, in *Cli2CCloseVolumeReq, opts ...grpc.CallOption) (*Cli2CCloseVolumeAck, error)
	Cli2CCreateINode(ctx context.Context, in *Cli2CCreateINodeReq, opts ...grpc.CallOption) (*Cli2CCreateINodeAck, error)
	Cli2CExceptionReport(ctx context.Context, in *Cli2CExceptionReportReq, opts ...grpc.CallOption) (*Cli2CExceptionReportAck, error)
	D2CJoin(ctx context.Context, in *D2CJoinReq, opts ...grpc.CallOption) (*D2CJoinAck, error)
	D2CStateReport(ctx context.Context, in *D2CStateReportReq, opts ...grpc.CallOption) (*D2CStateReportAck, error)
	D2CExceptionReport(ctx context.Context, in *D2CExceptionReportReq, opts ...grpc.CallOption) (*D2CExceptionReportAck, error)
	D2CBGRecoverReport(ctx context.Context, in *D2CBGRecoverReportReq, opts ...grpc.CallOption) (*D2CBGRecoverReportAck, error)
}

type controllerClient struct {
	cc *grpc.ClientConn
}

func NewControllerClient(cc *grpc.ClientConn) ControllerClient {
	return &controllerClient{cc}
}

func (c *controllerClient) M2CJoin(ctx context.Context, in *M2CJoinReq, opts ...grpc.CallOption) (*M2CJoinAck, error) {
	out := new(M2CJoinAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/M2CJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) M2CFailReport(ctx context.Context, in *M2CFailReportReq, opts ...grpc.CallOption) (*M2CFailReportAck, error) {
	out := new(M2CFailReportAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/M2CFailReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) M2CRGUpdate(ctx context.Context, in *M2CRGUpdateReq, opts ...grpc.CallOption) (*M2CRGUpdateAck, error) {
	out := new(M2CRGUpdateAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/M2CRGUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) M2CStateReport(ctx context.Context, in *M2CStateReportReq, opts ...grpc.CallOption) (*M2CStateReportAck, error) {
	out := new(M2CStateReportAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/M2CStateReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Cli2CCreateVolume(ctx context.Context, in *Cli2CCreateVolumeReq, opts ...grpc.CallOption) (*Cli2CCreateVolumeAck, error) {
	out := new(Cli2CCreateVolumeAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/Cli2CCreateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Cli2CDeleteVolume(ctx context.Context, in *Cli2CDeleteVolumeReq, opts ...grpc.CallOption) (*Cli2CDeleteVolumeAck, error) {
	out := new(Cli2CDeleteVolumeAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/Cli2CDeleteVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Cli2CUpdateVolume(ctx context.Context, in *Cli2CUpdateVolumeReq, opts ...grpc.CallOption) (*Cli2CUpdateVolumeAck, error) {
	out := new(Cli2CUpdateVolumeAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/Cli2CUpdateVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Cli2COpenVolume(ctx context.Context, in *Cli2COpenVolumeReq, opts ...grpc.CallOption) (*Cli2COpenVolumeAck, error) {
	out := new(Cli2COpenVolumeAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/Cli2COpenVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Cli2CCloseVolume(ctx context.Context, in *Cli2CCloseVolumeReq, opts ...grpc.CallOption) (*Cli2CCloseVolumeAck, error) {
	out := new(Cli2CCloseVolumeAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/Cli2CCloseVolume", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Cli2CCreateINode(ctx context.Context, in *Cli2CCreateINodeReq, opts ...grpc.CallOption) (*Cli2CCreateINodeAck, error) {
	out := new(Cli2CCreateINodeAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/Cli2CCreateINode", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) Cli2CExceptionReport(ctx context.Context, in *Cli2CExceptionReportReq, opts ...grpc.CallOption) (*Cli2CExceptionReportAck, error) {
	out := new(Cli2CExceptionReportAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/Cli2CExceptionReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) D2CJoin(ctx context.Context, in *D2CJoinReq, opts ...grpc.CallOption) (*D2CJoinAck, error) {
	out := new(D2CJoinAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/D2CJoin", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) D2CStateReport(ctx context.Context, in *D2CStateReportReq, opts ...grpc.CallOption) (*D2CStateReportAck, error) {
	out := new(D2CStateReportAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/D2CStateReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) D2CExceptionReport(ctx context.Context, in *D2CExceptionReportReq, opts ...grpc.CallOption) (*D2CExceptionReportAck, error) {
	out := new(D2CExceptionReportAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/D2CExceptionReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *controllerClient) D2CBGRecoverReport(ctx context.Context, in *D2CBGRecoverReportReq, opts ...grpc.CallOption) (*D2CBGRecoverReportAck, error) {
	out := new(D2CBGRecoverReportAck)
	err := grpc.Invoke(ctx, "/rbdproto.Controller/D2CBGRecoverReport", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Controller service

type ControllerServer interface {
	M2CJoin(context.Context, *M2CJoinReq) (*M2CJoinAck, error)
	M2CFailReport(context.Context, *M2CFailReportReq) (*M2CFailReportAck, error)
	M2CRGUpdate(context.Context, *M2CRGUpdateReq) (*M2CRGUpdateAck, error)
	M2CStateReport(context.Context, *M2CStateReportReq) (*M2CStateReportAck, error)
	Cli2CCreateVolume(context.Context, *Cli2CCreateVolumeReq) (*Cli2CCreateVolumeAck, error)
	Cli2CDeleteVolume(context.Context, *Cli2CDeleteVolumeReq) (*Cli2CDeleteVolumeAck, error)
	Cli2CUpdateVolume(context.Context, *Cli2CUpdateVolumeReq) (*Cli2CUpdateVolumeAck, error)
	Cli2COpenVolume(context.Context, *Cli2COpenVolumeReq) (*Cli2COpenVolumeAck, error)
	Cli2CCloseVolume(context.Context, *Cli2CCloseVolumeReq) (*Cli2CCloseVolumeAck, error)
	Cli2CCreateINode(context.Context, *Cli2CCreateINodeReq) (*Cli2CCreateINodeAck, error)
	Cli2CExceptionReport(context.Context, *Cli2CExceptionReportReq) (*Cli2CExceptionReportAck, error)
	D2CJoin(context.Context, *D2CJoinReq) (*D2CJoinAck, error)
	D2CStateReport(context.Context, *D2CStateReportReq) (*D2CStateReportAck, error)
	D2CExceptionReport(context.Context, *D2CExceptionReportReq) (*D2CExceptionReportAck, error)
	D2CBGRecoverReport(context.Context, *D2CBGRecoverReportReq) (*D2CBGRecoverReportAck, error)
}

func RegisterControllerServer(s *grpc.Server, srv ControllerServer) {
	s.RegisterService(&_Controller_serviceDesc, srv)
}

func _Controller_M2CJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M2CJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).M2CJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/M2CJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).M2CJoin(ctx, req.(*M2CJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_M2CFailReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M2CFailReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).M2CFailReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/M2CFailReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).M2CFailReport(ctx, req.(*M2CFailReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_M2CRGUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M2CRGUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).M2CRGUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/M2CRGUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).M2CRGUpdate(ctx, req.(*M2CRGUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_M2CStateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(M2CStateReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).M2CStateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/M2CStateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).M2CStateReport(ctx, req.(*M2CStateReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Cli2CCreateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cli2CCreateVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Cli2CCreateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/Cli2CCreateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Cli2CCreateVolume(ctx, req.(*Cli2CCreateVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Cli2CDeleteVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cli2CDeleteVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Cli2CDeleteVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/Cli2CDeleteVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Cli2CDeleteVolume(ctx, req.(*Cli2CDeleteVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Cli2CUpdateVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cli2CUpdateVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Cli2CUpdateVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/Cli2CUpdateVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Cli2CUpdateVolume(ctx, req.(*Cli2CUpdateVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Cli2COpenVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cli2COpenVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Cli2COpenVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/Cli2COpenVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Cli2COpenVolume(ctx, req.(*Cli2COpenVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Cli2CCloseVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cli2CCloseVolumeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Cli2CCloseVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/Cli2CCloseVolume",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Cli2CCloseVolume(ctx, req.(*Cli2CCloseVolumeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Cli2CCreateINode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cli2CCreateINodeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Cli2CCreateINode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/Cli2CCreateINode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Cli2CCreateINode(ctx, req.(*Cli2CCreateINodeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_Cli2CExceptionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cli2CExceptionReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).Cli2CExceptionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/Cli2CExceptionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).Cli2CExceptionReport(ctx, req.(*Cli2CExceptionReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_D2CJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(D2CJoinReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).D2CJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/D2CJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).D2CJoin(ctx, req.(*D2CJoinReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_D2CStateReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(D2CStateReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).D2CStateReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/D2CStateReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).D2CStateReport(ctx, req.(*D2CStateReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_D2CExceptionReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(D2CExceptionReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).D2CExceptionReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/D2CExceptionReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).D2CExceptionReport(ctx, req.(*D2CExceptionReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Controller_D2CBGRecoverReport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(D2CBGRecoverReportReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ControllerServer).D2CBGRecoverReport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rbdproto.Controller/D2CBGRecoverReport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ControllerServer).D2CBGRecoverReport(ctx, req.(*D2CBGRecoverReportReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Controller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rbdproto.Controller",
	HandlerType: (*ControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "M2CJoin",
			Handler:    _Controller_M2CJoin_Handler,
		},
		{
			MethodName: "M2CFailReport",
			Handler:    _Controller_M2CFailReport_Handler,
		},
		{
			MethodName: "M2CRGUpdate",
			Handler:    _Controller_M2CRGUpdate_Handler,
		},
		{
			MethodName: "M2CStateReport",
			Handler:    _Controller_M2CStateReport_Handler,
		},
		{
			MethodName: "Cli2CCreateVolume",
			Handler:    _Controller_Cli2CCreateVolume_Handler,
		},
		{
			MethodName: "Cli2CDeleteVolume",
			Handler:    _Controller_Cli2CDeleteVolume_Handler,
		},
		{
			MethodName: "Cli2CUpdateVolume",
			Handler:    _Controller_Cli2CUpdateVolume_Handler,
		},
		{
			MethodName: "Cli2COpenVolume",
			Handler:    _Controller_Cli2COpenVolume_Handler,
		},
		{
			MethodName: "Cli2CCloseVolume",
			Handler:    _Controller_Cli2CCloseVolume_Handler,
		},
		{
			MethodName: "Cli2CCreateINode",
			Handler:    _Controller_Cli2CCreateINode_Handler,
		},
		{
			MethodName: "Cli2CExceptionReport",
			Handler:    _Controller_Cli2CExceptionReport_Handler,
		},
		{
			MethodName: "D2CJoin",
			Handler:    _Controller_D2CJoin_Handler,
		},
		{
			MethodName: "D2CStateReport",
			Handler:    _Controller_D2CStateReport_Handler,
		},
		{
			MethodName: "D2CExceptionReport",
			Handler:    _Controller_D2CExceptionReport_Handler,
		},
		{
			MethodName: "D2CBGRecoverReport",
			Handler:    _Controller_D2CBGRecoverReport_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "controller.proto",
}

func init() { proto.RegisterFile("controller.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 611 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x95, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x86, 0xe9, 0xca, 0x5a, 0x38, 0x88, 0xd1, 0x9a, 0x32, 0x2a, 0x03, 0x63, 0xf8, 0x6a, 0xe3,
	0xa3, 0x48, 0xe1, 0x62, 0x88, 0xbb, 0x11, 0xc3, 0x28, 0x6a, 0x3b, 0x29, 0xa8, 0x68, 0x57, 0x48,
	0x5d, 0x62, 0xa1, 0x6a, 0xa1, 0x0e, 0x69, 0x06, 0xfc, 0x38, 0x7e, 0xdc, 0x94, 0x38, 0x5d, 0xfc,
	0x11, 0x27, 0xd9, 0x5d, 0x93, 0xf3, 0xfa, 0xf1, 0xb1, 0x63, 0x3f, 0x85, 0x9e, 0xcf, 0x57, 0x49,
	0xcc, 0xc3, 0x90, 0xc5, 0xa3, 0x28, 0xe6, 0x09, 0x47, 0x77, 0xe2, 0xf3, 0x20, 0xfb, 0x45, 0x3a,
	0x70, 0x7b, 0x36, 0x9f, 0x4c, 0x08, 0x01, 0x98, 0x3a, 0xee, 0x57, 0xbe, 0x5c, 0x79, 0xec, 0x37,
	0x1a, 0xc0, 0xf6, 0x74, 0xfd, 0x73, 0x1c, 0x0c, 0x5b, 0xfb, 0xad, 0x83, 0xb6, 0x27, 0x1e, 0xc8,
	0xe4, 0x3a, 0x73, 0xec, 0x5f, 0x94, 0x67, 0xd0, 0x2e, 0x74, 0x66, 0x3c, 0x60, 0xe3, 0x60, 0xb8,
	0xb5, 0xdf, 0x3a, 0xd8, 0xf6, 0xf2, 0x27, 0xd4, 0x83, 0xb6, 0xc7, 0x92, 0x61, 0x3b, 0x7b, 0x99,
	0xfe, 0x24, 0x5f, 0xa0, 0x37, 0x75, 0xdc, 0xcf, 0x8b, 0x65, 0xe8, 0xb1, 0x88, 0xc7, 0x89, 0x75,
	0x5e, 0xb4, 0x07, 0x90, 0xc6, 0x58, 0x90, 0xb2, 0x72, 0xae, 0xf4, 0x86, 0x7c, 0xd0, 0x48, 0xf6,
	0xee, 0xf2, 0x2e, 0xb6, 0x8a, 0x2e, 0xce, 0x60, 0x67, 0xea, 0xb8, 0xde, 0xc9, 0x3c, 0x0a, 0x16,
	0x09, 0xb3, 0xf7, 0xb0, 0x0b, 0x9d, 0x6f, 0xc9, 0x22, 0xb9, 0x5c, 0x6f, 0xd6, 0x25, 0x9e, 0xd0,
	0x10, 0xba, 0x33, 0xf6, 0x37, 0x6b, 0x4c, 0xac, 0x6d, 0xf3, 0x48, 0xde, 0x2b, 0xe4, 0x9b, 0xf4,
	0x74, 0x08, 0xfd, 0xa9, 0xe3, 0xa6, 0x13, 0xb0, 0x9a, 0xad, 0x31, 0xa3, 0xd6, 0x79, 0xc8, 0x6b,
	0x18, 0xb8, 0xe1, 0xd2, 0x71, 0xdd, 0x98, 0x2d, 0x12, 0xf6, 0x9d, 0x87, 0x97, 0xbf, 0xec, 0xeb,
	0x2d, 0x4d, 0xd7, 0xb3, 0x29, 0x0b, 0x59, 0x73, 0xb6, 0x9c, 0xae, 0x67, 0x8b, 0x7d, 0x6c, 0xca,
	0x96, 0xd3, 0x76, 0xf6, 0x4b, 0x40, 0x59, 0xfa, 0x34, 0x62, 0xab, 0x3a, 0xb2, 0x99, 0xb5, 0x73,
	0x5f, 0xc1, 0x43, 0xb1, 0x7b, 0x21, 0x5f, 0xd7, 0xb6, 0x5c, 0x12, 0x6e, 0x40, 0xce, 0xbe, 0xcb,
	0x38, 0x3d, 0x69, 0x0d, 0xc8, 0x45, 0xd8, 0x4e, 0x7e, 0x0b, 0x8f, 0xb3, 0xf0, 0xa7, 0x7f, 0x3e,
	0x8b, 0x92, 0x25, 0x5f, 0xd5, 0x9d, 0x3d, 0xcb, 0x00, 0xfb, 0x0c, 0x04, 0x80, 0xd6, 0x39, 0xa6,
	0xc8, 0xd8, 0x39, 0x87, 0xd0, 0xa7, 0xcd, 0xef, 0x07, 0x6d, 0x78, 0x3f, 0xde, 0xc0, 0x23, 0x7a,
	0x83, 0xd5, 0x97, 0xc6, 0xeb, 0xe8, 0x1f, 0x4f, 0x3c, 0xe6, 0xf3, 0x3f, 0x2c, 0x6e, 0x46, 0xd7,
	0xe2, 0x56, 0xba, 0xf3, 0xff, 0x2e, 0x80, 0x7b, 0x2d, 0x79, 0x74, 0x04, 0xdd, 0x5c, 0xd4, 0x68,
	0x30, 0xda, 0xa8, 0x7e, 0x54, 0xf8, 0x1d, 0x9b, 0x6f, 0x8f, 0xfd, 0x0b, 0x72, 0x0b, 0x8d, 0xe1,
	0xbe, 0x62, 0x52, 0x84, 0x95, 0xa0, 0x22, 0x6b, 0x6c, 0xab, 0x09, 0x94, 0x0b, 0xf7, 0x24, 0xfd,
	0xa1, 0xa1, 0x12, 0x96, 0x7c, 0x8b, 0xcb, 0x2b, 0x02, 0x32, 0xc9, 0x1c, 0x2a, 0x7d, 0x3e, 0xf4,
	0x44, 0x49, 0xab, 0x67, 0x00, 0x5b, 0x8b, 0x82, 0x36, 0x87, 0xbe, 0xe1, 0x34, 0xb4, 0x57, 0x8c,
	0x29, 0xd3, 0x23, 0xae, 0xaa, 0xab, 0x58, 0x59, 0x67, 0x06, 0x56, 0x33, 0x23, 0xae, 0xaa, 0xab,
	0x58, 0xd9, 0x64, 0x06, 0x56, 0x93, 0x22, 0xae, 0xaa, 0x0b, 0xec, 0x29, 0x3c, 0xd0, 0x34, 0x86,
	0x9e, 0x6a, 0x83, 0x14, 0x1b, 0x62, 0x7b, 0x55, 0x00, 0x3d, 0xe8, 0xe9, 0xfa, 0x42, 0xcf, 0xf4,
	0x4d, 0x53, 0x3c, 0x88, 0x2b, 0xca, 0x1a, 0xb3, 0x10, 0x97, 0xc9, 0x54, 0x0c, 0x88, 0x2b, 0xca,
	0x82, 0xf9, 0x23, 0xff, 0x67, 0xd0, 0xae, 0x2c, 0x7a, 0xa1, 0x0d, 0x34, 0x0d, 0x80, 0x6b, 0x22,
	0x82, 0x7f, 0x04, 0x5d, 0x6a, 0x5e, 0x3a, 0x5a, 0x7a, 0xe9, 0xa8, 0x7c, 0xe9, 0x26, 0xb0, 0x43,
	0xad, 0x87, 0x9c, 0x56, 0x1d, 0x72, 0x5a, 0x72, 0xc8, 0xcf, 0x00, 0x99, 0x5e, 0x42, 0xcf, 0x95,
	0x41, 0x25, 0x4b, 0xac, 0x0c, 0xc8, 0x64, 0xcd, 0x49, 0x1a, 0xd9, 0x14, 0x1c, 0xae, 0x0c, 0x64,
	0xe4, 0xf3, 0x4e, 0x56, 0x7e, 0x77, 0x15, 0x00, 0x00, 0xff, 0xff, 0x05, 0x61, 0x4f, 0x61, 0xa9,
	0x0a, 0x00, 0x00,
}
